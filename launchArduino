#!/bin/bash

# Copyright (c) 2015 mirage335

# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

##### ubiquitous_bash #####
#Retrieves absolute path of current script, while maintaining symlinks, even when "./" would translate with "readlink -f" into something disregarding symlinked components in $PWD.
#However, will dereference symlinks IF the script location itself is a symlink. This is to allow symlinking to scripts to function normally.
#Suitable for allowing scripts to find other scripts they depend on. May look like an ugly hack, but it has proven reliable over the years.
getScriptAbsoluteLocation() {
        local absoluteLocation
        if [[ (-e $PWD\/$0) && ($0 != "") ]]
                        then
        absoluteLocation="$PWD"\/"$0"
        absoluteLocation=$(realpath -s "$absoluteLocation")
                        else
        absoluteLocation="$0"
        fi

        if [[ -h "$absoluteLocation" ]]
                        then
        absoluteLocation=$(readlink -f "$absoluteLocation")
        fi

        echo $absoluteLocation
}

#Retrieves absolute path of current script, while maintaining symlinks, even when "./" would translate with "readlink -f" into something disregarding symlinked components in $PWD.
#Suitable for allowing scripts to find other scripts they depend on.
getScriptAbsoluteFolder() {
        dirname "$(getScriptAbsoluteLocation)"
}

scriptFolder="$(getScriptAbsoluteFolder)"
##### ubiquitous_bash #####

mkdir -p "$scriptFolder/Arduino"
mkdir -p "$scriptFolder/.arduino"
mkdir -p "$scriptFolder/.arduino15"

proot -b "$scriptFolder/Arduino:$HOME/Arduino" -b "$scriptFolder/.arduino:$HOME/.arduino" -b "$scriptFolder/.arduino15:$HOME/.arduino15" "$(which arduino)" "$@"


